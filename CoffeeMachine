MENU = {
    "espresso": {
        "ingredients": {
            "water": 50,
            "coffee": 18,
        },
        "cost": 1.5,
    },
    "latte": {
        "ingredients": {
            "water": 200,
            "milk": 150,
            "coffee": 24,
        },
        "cost": 2.5,
    },
    "cappuccino": {
        "ingredients": {
            "water": 250,
            "milk": 100,
            "coffee": 24,
        },
        "cost": 3.0,
    }
}

resources = {
    "water/ml": 300,
    "milk/ml": 200,
    "coffee/g": 100,
}

#TODO: 1 Prompt user by asking 'what would you like?(espresso/latte/capuccino)'.
# Check the user's input to decide what to do next, the prompt should show every time action has complted,
# once the drink is dispensed. the prompt should show again to serve the next customer



#TODO: 2 Creat a function to determine, is there enough water mile coffee to do cofffee
#should read the resources and do calculation
#def check_resources(resources, user_choice):


#TODO:3 Creat a function to collect the coins from user

def coin_collection():
    quarters = int(input('how many quaters?: '))
    dimes = int(input('how many dimes?: '))
    nickels = int(input('how many nickels?: '))
    pennies = int(input('how many pennies?: '))
    total = quarters*0.25 + dimes*0.1 + nickels*0.05 + pennies*0.01
    return total

#compare the coin collected from user is enough to buy the coffee
def compare_coins(coins, MENU, user_choice):
    if MENU[user_choice]['cost'] < coins:
        rest_coins = format(coins - MENU[user_choice]['cost'], '.2f')
        print(f"Here is ${rest_coins} in change")
        return True
    elif MENU[user_choice]['cost'] == coins:
        print('enough money')
        return True
    else:
        print("not enough money, coins returned")
        return False
#TODO: 4 Convert the user_choice to a list of materials, [water, milk, coffee], make it easy to read
def comfirm_resource(User_choice, MENU, resource):
    for key in MENU[User_choice]['ingredients']:
        if MENU[User_choice]['ingredients'][key] > resource[key]:
            print(f'{key} is not enough')
            return False
        #else:
            #print(f'{key} is enough')
    return True

#TODO:4 Creat a function that can calculate the rest of the resource, update the resrouce dic
def update_resource(User_choice, MENU, resources):
    for key in MENU[User_choice]['ingredients']:
        resources[key] -= MENU[User_choice]['ingredients'][key]
        #print(resources)
    return resources

#report the rest of resources when user type report
def check_resource(resources):
    for key in resources:
        print(f"{key}: {resources[key]}")



#TODO: 5 Creat a function to collect the coins from the user, return the total money from the user inserted

is_on = True
while is_on:
    User_choice = input("What would you like? (espresso/latte/cappuccino): ").lower()

    if User_choice == 'off':
        is_on = False
    elif User_choice == 'report':
        check_resource(resources)
    else:
        confirm_user_choice = comfirm_resource(User_choice, MENU, resources)
        #print(confirm_user_choice)
        if confirm_user_choice == True:
            coins = coin_collection()
            #print(coins)
            enough_coin = compare_coins(coins,MENU, User_choice)
            if enough_coin == True:
                print(f"Here is your {User_choice} Coffee â˜•")
                update_resource(User_choice, MENU, resources)
